import logging

from telegram import Update, User
from telegram.ext import CallbackContext, ContextTypes

from app.keyboards import main_menu_keyboard, user_settings_keyboard
from app.services import create_user, get_user

from app.services.services import notify_user, fetch_service_center, approve_service_claim, reject_service_claim, search_service_centers as search_service_centers_api

from app.keyboards.keyboards import search_results_keyboard
from app.utils.telegram_utils import get_user_with_city, send_or_edit_message

from app.helpers import format_service_center_message, format_manage_service_center_message
from app.keyboards import service_centers_buttons_keyboard, manage_service_centers_buttons_keyboard

from app.components import service_center_list

from app.services.services import get_owned_service_centers

from app.keyboards.keyboards import service_admin_results_keyboard

logger = logging.getLogger(__name__)

ADMIN_IDS = [1731471920]

async def search_centers(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_center –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ API."""
    await service_center_list(update, context)

async def handle_center_paginate(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ API."""
    query = update.callback_query
    data = query.data.split('_')
    logger.info(data)
    page = int(data[2])
    search_query = data[3]
    city_id = int(data[4]) if data[4] else None

    params = {
        "query": search_query,
        "city_id": city_id,
        "page": page + 1,
        "limit": 5
    }

    response = await search_service_centers_api(params)
    centers = response['data']
    total_count = response.get('total')
    last_page = response.get('last_page')

    message, keyboard = search_results_keyboard(
        service_centers=centers,
        page=page,
        total_count=total_count,
        last_page=last_page,
        items_per_page=5,
        query=search_query,
        city_id=city_id
    )
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode="HTML")

async def handle_center_admin_paginate(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ API."""
    query = update.callback_query
    data = query.data.split('_')
    page = int(data[3])
    logger.info(page)
    telegram_id = update.effective_user.id
    if not telegram_id:
        await send_or_edit_message(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID.")
        return


    params = {
        "owner_id": telegram_id,
        "page": page + 1,
        "limit": 1
    }

    response = await search_service_centers_api(params)
    centers = response.get('data')
    total_count = response.get('total')
    last_page = response.get('last_page')

    message, keyboard = service_admin_results_keyboard(service_centers=centers, page=page, last_page=last_page, items_per_page=1, total_count=total_count)

    await query.edit_message_text(message, reply_markup=keyboard, parse_mode="HTML")

async def handle_center_select(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /service_center_{id} –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω—Ç—Ä–µ."""
    text = update.message.text
    if not text.startswith("/service_center_"):
        return

    try:
        center_id = int(text[len("/service_center_"):])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ü–µ–Ω—Ç—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /service_center_{id}")
        return

    try:
        service_center = await fetch_service_center(center_id)
        telegram_id = update.effective_user.id
        is_owner = service_center.get('owner_id') == telegram_id

        if service_center:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            page = context.user_data.get('prev_center_page', 0)
            context.user_data['prev_center_page'] = page
            message_text = format_service_center_message(service_center)

            await send_or_edit_message(
                update,
                message_text,
                reply_markup=service_centers_buttons_keyboard(service_center_id=center_id, is_owner=is_owner),
                parse_mode="HTML"
            )
        else:
            await send_or_edit_message(update, "–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await send_or_edit_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞.")
        logger.error(f"Error in center selection: {e}")

async def handle_manage_center_select(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /service_center_{id} –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω—Ç—Ä–µ."""
    text = update.message.text
    if not text.startswith("/manage_service_center_"):
        return

    try:
        center_id = int(text[len("/manage_service_center_"):])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ü–µ–Ω—Ç—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /manage_service_center_{id}")
        return

    try:
        service_center = await fetch_service_center(center_id)
        telegram_id = update.effective_user.id
        is_owner = service_center.get('owner_id') == telegram_id

        if service_center:
            if is_owner:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                page = context.user_data.get('prev_center_page', 0)
                context.user_data['prev_center_page'] = page
                message_text = format_manage_service_center_message(service_center)

                await send_or_edit_message(
                    update,
                    message_text,
                    reply_markup=manage_service_centers_buttons_keyboard(service_center_id=center_id),
                    parse_mode="HTML"
                )
        else:
            await send_or_edit_message(update, "–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await send_or_edit_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞.")
        logger.error(f"Error in center selection: {e}")

async def create_or_update_user(telegram_id: int, user_info: User) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    if not user_info:
        logger.warning("No user info provided")
        return

    user_data = {
        "telegram_id": telegram_id,
        "username": user_info.username,
        "first_name": user_info.first_name or "",
        "last_name": user_info.last_name or "",
        "language_code": user_info.language_code or "en"
    }

    existing_user = await get_user(telegram_id)
    if not existing_user:
        await create_user(user_data)
        logger.info(f"Created new user: {telegram_id}")
    else:
        logger.debug(f"User {telegram_id} already exists, skipping creation")

async def handle_start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await create_or_update_user(update.message.from_user.id, update.message.from_user)
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())

async def handle_settings(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    await create_or_update_user(update.message.from_user.id, update.message.from_user)
    await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=user_settings_keyboard())

async def search_service_centers(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤"""
    from ..components import service_center_list  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    await service_center_list(update=update, context=context)

async def handle_approve_claim(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: /approve_claim {claim_id}"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if not args or len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve_claim {claim_id}")
        return

    try:
        claim_id = int(args[0])
        claim = await approve_service_claim(claim_id)
        if claim:
            center_name = (await fetch_service_center(claim['service_center_id']))['name']
            message = (
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º <b>{center_name}</b> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º —á–µ—Ä–µ–∑ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º üõ†Ô∏è'."
            )
            await notify_user(claim['telegram_id'], message, context)
            await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ {claim_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏.")

async def handle_reject_claim(update: Update, context: ContextTypes) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫–∞–∑–∞ –∑–∞—è–≤–∫–∏: /reject_claim {claim_id}"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if not args or len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject_claim {claim_id}")
        return

    try:
        claim_id = int(args[0])
        claim = await reject_service_claim(claim_id)
        if claim:
            center = await fetch_service_center(claim['service_center_id'])
            center_name = center['name'] if center else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä"
            message = (
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º <b>{center_name}</b> –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                "–ó–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - /help."
            )
            await notify_user(claim['telegram_id'], message, context)
            await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ {claim_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏.")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏.")
    except Exception as e:
        logger.error(f"Error rejecting claim {args[0]}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")