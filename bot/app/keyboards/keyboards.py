import logging

from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from typing import List, Dict, Any, Optional

from app.helpers import pluralize_reviews

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback-–ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
CALLBACK_REGION_PREFIX = "region_"
CALLBACK_CITY_PREFIX = "city_"
CALLBACK_CENTER_PREFIX = "center_"
CALLBACK_CENTER_PAGE_PREFIX = "center_page_"
CALLBACK_REVIEWS_PREFIX = "reviews_"
CALLBACK_PRICES_PREFIX = "prices_"
CALLBACK_CLAIM_SERVICE_PREFIX = "claim_service_"
CALLBACK_BACK_REGION = "back_region_list"
CALLBACK_BACK_CENTER = "back_center_list"
ITEMS_PER_PAGE = 5


def _build_inline_keyboard(
        items: List[Dict[str, Any]],
        label_key: str,
        callback_prefix: str,
        columns: int = 2,
        extra_buttons: Optional[List[InlineKeyboardButton]] = None
) -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–ª–æ–Ω–æ–∫.

    Args:
        items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        label_key: –ö–ª—é—á —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
        columns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
        extra_buttons: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ü–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    keyboard = []
    for i in range(0, len(items), columns):
        row = [
            InlineKeyboardButton(
                items[i + j][label_key],
                callback_data=f"{callback_prefix}{items[i + j]['id']}"
            )
            for j in range(columns) if i + j < len(items)
        ]
        keyboard.append(row)

    if extra_buttons:
        keyboard.append(extra_buttons)

    return InlineKeyboardMarkup(keyboard)


# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∏–∫–æ–Ω–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton("–°–µ—Ä–≤–∏—Å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã üõ†Ô∏è")],
        [KeyboardButton("–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É —Ä–µ–º–æ–Ω—Ç–∞ üí∞")],
        [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚öôÔ∏è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)


def user_settings_keyboard() -> ReplyKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [KeyboardButton("–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é üåç")],
        [KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º üõ†Ô∏è")],
        [KeyboardButton("–ù–∞–∑–∞–¥ üîô")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)


# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def regions_keyboard(regions: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ (inline, 2 –∫–æ–ª–æ–Ω–∫–∏)"""
    return _build_inline_keyboard(
        items=regions,
        label_key="name",
        callback_prefix=CALLBACK_REGION_PREFIX,
        columns=2
    )


def cities_keyboard(cities: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (inline, 2 –∫–æ–ª–æ–Ω–∫–∏)"""
    back_button = [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=CALLBACK_BACK_REGION)]
    return _build_inline_keyboard(
        items=cities,
        label_key="name",
        callback_prefix=CALLBACK_CITY_PREFIX,
        columns=2,
        extra_buttons=back_button
    )


def service_centers_keyboard(
        service_centers: List[Dict[str, Any]],
        page: int = 0,
        items_per_page: int = ITEMS_PER_PAGE
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    keyboard = []

    for center in service_centers:
        button_text = f"{center['name']} ‚≠êÔ∏è{center.get('avg_rating', 0)} ({center.get('reviews_count', 0)})"
        keyboard.append([
            InlineKeyboardButton(button_text, callback_data=f"{CALLBACK_CENTER_PREFIX}{center['id']}")
        ])

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CALLBACK_CENTER_PAGE_PREFIX}{page - 1}")
        )
    if len(service_centers) == items_per_page:
        navigation_buttons.append(
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{CALLBACK_CENTER_PAGE_PREFIX}{page + 1}")
        )

    if navigation_buttons:
        keyboard.append(navigation_buttons)

    return InlineKeyboardMarkup(keyboard)


def service_centers_buttons_keyboard(service_center_id: int, is_owner: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞"""
    back_data = f"back_to_list_"
    logger.debug(f"Back data={back_data}")

    keyboard = [
        [InlineKeyboardButton("–û—Ç–∑—ã–≤—ã üìù", callback_data=f"{CALLBACK_REVIEWS_PREFIX}{service_center_id}")],
        [InlineKeyboardButton("–ü—Ä–∞–π—Å-–ª–∏—Å—Ç üí∞", callback_data=f"{CALLBACK_PRICES_PREFIX}{service_center_id}")],
    ]

    if is_owner is False:
        manage_button = InlineKeyboardButton(
            "–≠—Ç–æ –º–æ–π —Å–µ—Ä–≤–∏—Å üõ†Ô∏è",
            callback_data=f"{CALLBACK_CLAIM_SERVICE_PREFIX}{service_center_id}"
        )
        keyboard.append([manage_button])

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data=back_data)])

    return InlineKeyboardMarkup(keyboard)

def manage_service_centers_buttons_keyboard(service_center_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞"""
    back_data = f"back_to_manage_service_list_"
    logger.debug(f"Back data={back_data}")

    keyboard = [
        [InlineKeyboardButton("–û—Ç–∑—ã–≤—ã üìù", callback_data=f"{CALLBACK_REVIEWS_PREFIX}{service_center_id}")],
        [InlineKeyboardButton("–ü—Ä–∞–π—Å-–ª–∏—Å—Ç üí∞", callback_data=f"{CALLBACK_PRICES_PREFIX}{service_center_id}")],
    ]

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data=back_data)])

    return InlineKeyboardMarkup(keyboard)


def reviews_buttons_keyboard(service_center_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(
            "–ù–∞–∑–∞–¥ üîô",
            callback_data=f"{CALLBACK_CENTER_PREFIX}{service_center_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def search_results_keyboard(
        service_centers: List[Dict],
        page: int,
        items_per_page: int,
        total_count: int,
        last_page: int,
        query: str,
        city_id: Optional[int] = None
) -> tuple[str, InlineKeyboardMarkup]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."""
    if not service_centers:
        return "–°–µ—Ä–≤–∏—Å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", InlineKeyboardMarkup([])

    if not query:
        message_lines = [f"<b>–õ—É—á—à–∏–µ —Å–µ—Ä–≤–∏—Å—ã –≤ {service_centers[0]['city_name']} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {last_page}):</b>\n"]
    else:
        message_lines = [f"–°–µ—Ä–≤–∏—Å—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É - <b>{query}</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {last_page})\n"]

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—Ç—Ä—ã —Å —É—á—ë—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    for i, center in enumerate(service_centers, start=page * items_per_page + 1):
        avg_rating = center.get('avg_rating', 0)
        reviews_count = center.get('reviews_count', 0)
        name = center['name']
        address = center.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (page == 0)
        if page == 0 and i == 1 and not query:  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            line = (
                f"üèÜ <b>{name}</b> ‚≠êÔ∏è{avg_rating:.1f} ({reviews_count} {pluralize_reviews(reviews_count)})\n"
                f"{address}\n"
                f"/service_center_{center['id']} - –ø–æ–¥—Ä–æ–±–Ω–µ–µ\n"
                f"{'-' * 20}"
            )
        elif page == 0 and i <= 3 and not query:  # –í—Ç–æ—Ä—ã–µ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            line = (
                f"üîπ <b>{name}</b> ‚≠êÔ∏è{avg_rating:.1f} ({reviews_count} {pluralize_reviews(reviews_count)})\n"
                f"{address}\n"
                f"/service_center_{center['id']} - –ø–æ–¥—Ä–æ–±–Ω–µ–µ\n"
                f"{'-' * 20}"
            )
        else:  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–≤–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            line = (
                f"{i}. {name} ‚≠êÔ∏è{avg_rating:.1f} ({reviews_count} {pluralize_reviews(reviews_count)})\n"
                f"{address}\n"
                f"/service_center_{center['id']} - –ø–æ–¥—Ä–æ–±–Ω–µ–µ\n"
                f"{'-' * 20}"
            )
        message_lines.append(line)

    message_lines.append(f"\n–í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤: {total_count}\n")
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ
    message = "\n".join(message_lines)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = []
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_page_{page - 1}_{query}_{city_id or ''}")
        )
    if page < last_page - 1:
        navigation_buttons.append(
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"search_page_{page + 1}_{query}_{city_id or ''}")
        )

    if navigation_buttons:
        keyboard.append(navigation_buttons)

    return message, InlineKeyboardMarkup(keyboard)


def service_admin_results_keyboard(
        service_centers: List[Dict],
        page: int,
        items_per_page: int,
        total_count: int,
        last_page: int,
) -> tuple[str, InlineKeyboardMarkup]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."""
    if not service_centers:
        return "–°–µ—Ä–≤–∏—Å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", InlineKeyboardMarkup([])

    message_lines = [f"<b>–í–∞—à–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {last_page}):</b>"]

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—Ç—Ä—ã —Å —É—á—ë—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    for i, center in enumerate(service_centers, start=page * items_per_page + 1):
        avg_rating = center.get('avg_rating', 0)
        reviews_count = center.get('reviews_count', 0)
        name = center['name']
        address = center.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')

        line = (
            f"{i}. {name} ‚≠êÔ∏è{avg_rating:.1f} ({reviews_count} {pluralize_reviews(reviews_count)})\n"
            f"{address}\n"
            f"/manage_service_center_{center['id']} - –ø–æ–¥—Ä–æ–±–Ω–µ–µ\n"
            f"{'-' * 20}"
        )

        message_lines.append(line)

    message_lines.append(f"\n–í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤: {total_count}\n")
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ
    message = "\n".join(message_lines)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = []
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"service_admin_page_{page - 1}")
        )
    if page < last_page - 1:
        navigation_buttons.append(
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"service_admin_page_{page + 1}")
        )

    if navigation_buttons:
        keyboard.append(navigation_buttons)

    return message, InlineKeyboardMarkup(keyboard)
