"""Update tables

Revision ID: 362fce5e3543
Revises: ec5dcb267f51
Create Date: 2025-02-24 21:16:05.574507

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '362fce5e3543'
down_revision: Union[str, None] = 'ec5dcb267f51'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('api_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('endpoint', sa.String(), nullable=False),
    sa.Column('method', sa.String(), nullable=False),
    sa.Column('request_data', sa.JSON(), nullable=True),
    sa.Column('response_data', sa.JSON(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('response_time', sa.Integer(), nullable=True),
    sa.Column('status_code', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_api_log_endpoint', 'api_logs', ['endpoint'], unique=False)
    op.create_index('idx_api_log_method', 'api_logs', ['method'], unique=False)
    op.create_index('idx_api_log_status_code', 'api_logs', ['status_code'], unique=False)
    op.create_table('repair_prices',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('device_model_id', sa.Integer(), nullable=False),
    sa.Column('repair_id', sa.Integer(), nullable=False),
    sa.Column('price', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['device_model_id'], ['device_models.id'], ),
    sa.ForeignKeyConstraint(['repair_id'], ['repairs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_repair_price_device_model_id', 'repair_prices', ['device_model_id'], unique=False)
    op.create_index('idx_repair_price_repair_id', 'repair_prices', ['repair_id'], unique=False)
    op.create_table('price_analytics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('repair_price_id', sa.Integer(), nullable=False),
    sa.Column('service_center_id', sa.Integer(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['repair_price_id'], ['repair_prices.id'], ),
    sa.ForeignKeyConstraint(['service_center_id'], ['service_centers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index('idx_price_history_price_id', table_name='price_history')
    op.drop_table('price_history')
    op.add_column('bot_logs', sa.Column('session_id', sa.String(), nullable=True))
    op.add_column('bot_logs', sa.Column('command', sa.String(), nullable=True))
    op.add_column('bot_logs', sa.Column('status', sa.String(), nullable=True))
    op.create_index('idx_bot_log_session_id', 'bot_logs', ['session_id'], unique=False)
    op.create_foreign_key(None, 'bot_logs', 'users', ['telegram_user_id'], ['telegram_id'])
    op.alter_column('cities', 'population',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.add_column('device_models', sa.Column('release_year', sa.Integer(), nullable=True))
    op.add_column('device_models', sa.Column('display_size', sa.String(), nullable=True))
    op.add_column('device_models', sa.Column('processor', sa.String(), nullable=True))
    op.add_column('device_models', sa.Column('ram', sa.String(), nullable=True))
    op.add_column('device_models', sa.Column('storage', sa.String(), nullable=True))
    op.create_index('idx_device_model_type', 'device_models', ['type'], unique=False)
    op.add_column('model_repairs', sa.Column('estimated_time', sa.Integer(), nullable=True))
    op.add_column('model_repairs', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('model_repairs', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('parts', sa.Column('manufacturer', sa.String(length=100), nullable=True))
    op.add_column('parts', sa.Column('sku', sa.String(length=100), nullable=True))
    op.add_column('parts', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('parts', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('parts', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.create_unique_constraint(None, 'parts', ['sku'])
    op.add_column('prices', sa.Column('repair_price_id', sa.Integer(), nullable=False))
    op.drop_index('idx_price_device_brand_id', table_name='prices')
    op.drop_index('idx_price_device_model_id', table_name='prices')
    op.drop_index('idx_price_repair_type_id', table_name='prices')
    op.create_index('idx_price_repair_price_id', 'prices', ['repair_price_id'], unique=False)
    op.drop_constraint('prices_repair_type_id_fkey', 'prices', type_='foreignkey')
    op.drop_constraint('prices_device_model_id_fkey', 'prices', type_='foreignkey')
    op.drop_constraint('prices_device_brand_id_fkey', 'prices', type_='foreignkey')
    op.create_foreign_key(None, 'prices', 'repair_prices', ['repair_price_id'], ['id'])
    op.drop_column('prices', 'device_model_id')
    op.drop_column('prices', 'repair_type_id')
    op.drop_column('prices', 'device_brand_id')
    op.add_column('repair_parts', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('repair_parts', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('repair_types', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('repair_types', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('repairs', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('repairs', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('reviews', 'text',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.add_column('service_center_addresses', sa.Column('street', sa.String(), nullable=True))
    op.add_column('service_center_addresses', sa.Column('building', sa.String(), nullable=True))
    op.add_column('service_center_addresses', sa.Column('apartment', sa.String(), nullable=True))
    op.add_column('service_center_addresses', sa.Column('postal_code', sa.String(), nullable=True))
    op.add_column('service_center_addresses', sa.Column('latitude', sa.Float(), nullable=True))
    op.add_column('service_center_addresses', sa.Column('longitude', sa.Float(), nullable=True))
    op.create_index('idx_service_center_owner_id', 'service_centers', ['owner_id'], unique=False)
    op.add_column('service_claim_requests', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('is_admin', sa.Boolean(), nullable=False))
    op.add_column('users', sa.Column('phone', sa.String(), nullable=True))
    op.add_column('users', sa.Column('email', sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'email')
    op.drop_column('users', 'phone')
    op.drop_column('users', 'is_admin')
    op.drop_column('service_claim_requests', 'updated_at')
    op.drop_index('idx_service_center_owner_id', table_name='service_centers')
    op.drop_column('service_center_addresses', 'longitude')
    op.drop_column('service_center_addresses', 'latitude')
    op.drop_column('service_center_addresses', 'postal_code')
    op.drop_column('service_center_addresses', 'apartment')
    op.drop_column('service_center_addresses', 'building')
    op.drop_column('service_center_addresses', 'street')
    op.alter_column('reviews', 'text',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_column('repairs', 'updated_at')
    op.drop_column('repairs', 'created_at')
    op.drop_column('repair_types', 'updated_at')
    op.drop_column('repair_types', 'created_at')
    op.drop_column('repair_parts', 'updated_at')
    op.drop_column('repair_parts', 'created_at')
    op.add_column('prices', sa.Column('device_brand_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('prices', sa.Column('repair_type_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('prices', sa.Column('device_model_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'prices', type_='foreignkey')
    op.create_foreign_key('prices_device_brand_id_fkey', 'prices', 'device_brands', ['device_brand_id'], ['id'])
    op.create_foreign_key('prices_device_model_id_fkey', 'prices', 'device_models', ['device_model_id'], ['id'])
    op.create_foreign_key('prices_repair_type_id_fkey', 'prices', 'repair_types', ['repair_type_id'], ['id'])
    op.drop_index('idx_price_repair_price_id', table_name='prices')
    op.create_index('idx_price_repair_type_id', 'prices', ['repair_type_id'], unique=False)
    op.create_index('idx_price_device_model_id', 'prices', ['device_model_id'], unique=False)
    op.create_index('idx_price_device_brand_id', 'prices', ['device_brand_id'], unique=False)
    op.drop_column('prices', 'repair_price_id')
    op.drop_constraint(None, 'parts', type_='unique')
    op.drop_column('parts', 'updated_at')
    op.drop_column('parts', 'created_at')
    op.drop_column('parts', 'description')
    op.drop_column('parts', 'sku')
    op.drop_column('parts', 'manufacturer')
    op.drop_column('model_repairs', 'updated_at')
    op.drop_column('model_repairs', 'created_at')
    op.drop_column('model_repairs', 'estimated_time')
    op.drop_index('idx_device_model_type', table_name='device_models')
    op.drop_column('device_models', 'storage')
    op.drop_column('device_models', 'ram')
    op.drop_column('device_models', 'processor')
    op.drop_column('device_models', 'display_size')
    op.drop_column('device_models', 'release_year')
    op.alter_column('cities', 'population',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint(None, 'bot_logs', type_='foreignkey')
    op.drop_index('idx_bot_log_session_id', table_name='bot_logs')
    op.drop_column('bot_logs', 'status')
    op.drop_column('bot_logs', 'command')
    op.drop_column('bot_logs', 'session_id')
    op.create_table('price_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('price_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('old_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('new_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('change_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['price_id'], ['prices.id'], name='price_history_price_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='price_history_pkey')
    )
    op.create_index('idx_price_history_price_id', 'price_history', ['price_id'], unique=False)
    op.drop_table('price_analytics')
    op.drop_index('idx_repair_price_repair_id', table_name='repair_prices')
    op.drop_index('idx_repair_price_device_model_id', table_name='repair_prices')
    op.drop_table('repair_prices')
    op.drop_index('idx_api_log_status_code', table_name='api_logs')
    op.drop_index('idx_api_log_method', table_name='api_logs')
    op.drop_index('idx_api_log_endpoint', table_name='api_logs')
    op.drop_table('api_logs')
    # ### end Alembic commands ###
