import logging
import re

import httpx
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, JobQueue

from services import fetch_cities
from config import CITY, SERVICE, REPAIR_DETAILS, CHOOSE_SERVICE_CENTER, CHOOSE_DATE, CHOOSE_TIME, ENTER_NAME, \
    ENTER_PHONE, DEVICE_IN_SERVICE, ORDER_REGEX, PHONE_REGEX, NAME_REGEX
from keyboards import SERVICE_OPTIONS, SERVICE_CENTERS, DATE_OPTIONS, TIME_OPTIONS, PHONE_KEYBOARD
from utils import normalize_phone

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞"""
    user = update.message.from_user.first_name
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} (ID: {user_id}) –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥")
    welcome_message = (
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –í–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥. "
        "–¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ! –ü—Ä–∏–º–µ—Ä: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É, –£—Ñ–∞"
    )
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    context.user_data.clear()
    context.chat_data.clear()
    await update.message.reply_text(welcome_message)

    return CITY


async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—Å–ª—É–≥–∞–º–∏"""
    city_name = update.message.text
    user_id = update.message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤–≤–µ–ª –≥–æ—Ä–æ–¥: {city_name}")

    try:
        cities = await fetch_cities({"name": city_name, "limit": 1300})

        # –ò—â–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞
        matched_city = next(
            (city for city in cities if city["name"].lower() == city_name.lower()),
            None
        )

        if matched_city:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ –≤ context.user_data
            context.user_data['city'] = matched_city
            logger.info(f"–ì–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω: {matched_city['name']} (ID: {matched_city['id']})")

            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
            reply_keyboard = ReplyKeyboardMarkup(
                SERVICE_OPTIONS,
                one_time_keyboard=True,
                resize_keyboard=True
            )

            await update.message.reply_text(
                f"–û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {matched_city['name']}. –ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ?",
                reply_markup=reply_keyboard
            )
            return SERVICE  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        else:
            # –ü–æ–ª–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            suggestions = [
                city["name"] for city in cities
                if city_name.lower() in city["name"].lower()
            ]

            if suggestions:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                suggestion_keyboard = ReplyKeyboardMarkup(
                    [[suggestion] for suggestion in suggestions[:5]],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
                await update.message.reply_text(
                    f"–ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –≥–æ—Ä–æ–¥–æ–≤?\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∑–∞–Ω–æ–≤–æ:",
                    reply_markup=suggestion_keyboard
                )
                context.user_data['suggested_cities'] = cities  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                return CITY  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CITY
            else:
                # –ù–µ—Ç –¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                await update.message.reply_text(
                    "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É, –£—Ñ–∞"
                )
                return CITY

    except httpx.HTTPStatusError as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        return CITY
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return CITY
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return CITY


async def get_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏"""
    service = update.message.text
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤—ã–±—Ä–∞–ª —É—Å–ª—É–≥—É: {service}")
    context.user_data['service'] = service
    city = context.user_data['city']

    if service == "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç / –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        await update.message.reply_text(
            "–ö–∞–∫–∞—è —É –í–∞—Å –º–æ–¥–µ–ª—å? –ß—Ç–æ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º?\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: iPhone 12 Pro Max, –±—ã—Å—Ç—Ä–æ —Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è"
        )
        
        return REPAIR_DETAILS
    elif service == "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–¥—Ä–æ–≥–µ–ª–µ–≤–æ–π –ø–ª—ë–Ω–∫–æ–π":
        await update.message.reply_text(
            f"üî• –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–¥—Ä–æ–≥–µ–ª–µ–≤–æ–π –ø–ª–µ–Ω–∫–æ–π.\n"
            f"–û–Ω–∞ –ø–ª–æ—Ç–Ω–æ –ª–æ–∂–∏—Ç—Å—è –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∏ —Å—Ç—è–≥–∏–≤–∞–µ—Ç –¥–µ—Ñ—Ñ–µ–∫—Ç—ã (—Ü–∞—Ä–∞–ø–∏–Ω—ã).\n\n"
            f"+ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n"
            f"+ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤ 4-5 —Ä–∞–∑ –¥–æ–ª—å—à–µ –ª—é–±–æ–≥–æ —Å—Ç–µ–∫–ª–∞\n"
            f"+ –∑–∞—â–∏—Ç–∞ –æ—Ç –≤–ª–∞–≥–∏\n\n"
            f"üî• –û–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Äì –æ—Ç 990 —Ä—É–±\n\n"
            f"–ü–ª–µ–Ω–∫–∞ –≤—ã—Ä–µ–∑–∞–µ—Ç—Å—è –ø–ª–æ—Ç—Ç–µ—Ä–æ–º –ø–æ–¥ –í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–º–æ–∂–µ–º –æ–∑–≤—É—á–∏—Ç—å –≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ\n\n"
            f"–í –≥–æ—Ä–æ–¥–µ {city} –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤:"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ —Å —É—Å–ª—É–≥–æ–π: {service}")
        return ConversationHandler.END
    elif service == "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–±–µ–ª—è/—á–µ—Ö–ª–∞/–∑–∞—â–∏—Ç–∞ —ç–∫—Ä–∞–Ω–∞":
        await update.message.reply_text(
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–±–µ–ª—è/—á–µ—Ö–ª–∞/–∑–∞—â–∏—Ç–∞ —ç–∫—Ä–∞–Ω–∞\n"
            f"‚úÖ –ó–∞—â–∏—Ç–∞ —ç–∫—Ä–∞–Ω–∞:\n\n"
            f"–ó–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ\n"
            f"- –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç 390 —Ä—É–±.\n"
            f"- iPad –æ—Ç 990 —Ä—É–±.\n\n"
            f"‚úÖ –ö–∞–±–µ–ª–∏ –æ—Ç 590 —Ä—É–±.\n"
            f"‚úÖ –ß–µ—Ö–ª—ã –æ—Ç 390 —Ä—É–±.\n\n"
            f"–í –≥–æ—Ä–æ–¥–µ {city} –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤:\n\n"
            f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ, –±—É–¥–µ–º –∂–¥–∞—Ç—å –í–∞—Å! üôÇ"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ —Å —É—Å–ª—É–≥–æ–π: {service}")
        return ConversationHandler.END
    elif service == "–ú–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–µ—Ä–≤–∏—Å–µ":
        await update.message.reply_text(
            f"–ú–æ—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–µ—Ä–≤–∏—Å–µ\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX-XXXXX –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∑–∞–∫–∞–∑–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79999999999\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 253-59912 –∏–ª–∏ 79217578234"
        )
        return DEVICE_IN_SERVICE
    elif service == "–•–æ—á—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏":
        await update.message.reply_text(
            f"–ì–∞—Ä–∞–Ω—Ç–∏—è\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –∏–º–µ—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π, "
            f"–ø—Ä–æ—Å–∏–º –í–∞—Å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —Ä–µ–º–æ–Ω—Ç. "
            f"–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ —Å–µ–±–µ –∏–º–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞–ª–∏ –í–∞–º –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞."
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ —Å —É—Å–ª—É–≥–æ–π: {service}")
        return ConversationHandler.END
    elif service == "–ü—Ä–æ–¥–∞–∂–∞/–ø–æ–∫—É–ø–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
        await update.message.reply_text(
            f"–í—ã–∫—É–ø —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤\n"
            f"–ü–æ –¥–∞–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –í–∞—Å —Å–º–æ–≥—É—Ç –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à–∏ –∫–æ–ª–ª–µ–≥–∏ –≤ Pedant.Market. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å:\n\n"
            f"Telegram: https://t.me/Pedant_Market_bot?start=pm_start-selltg\n\n"
            f"WhatsApp: https://wa.me/79279260969\n\n"
            f"–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è: 8 (800) 301-33-09"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ —Å —É—Å–ª—É–≥–æ–π: {service}")
        return ConversationHandler.END
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤—ã–±—Ä–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é —É—Å–ª—É–≥—É: {service}")
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return SERVICE


async def device_in_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è '–ú–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–µ—Ä–≤–∏—Å–µ'"""
    user_input = update.message.text
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    city = context.user_data['city']
    service = context.user_data['service']
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤–≤–µ–ª –¥–ª—è '–ú–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–µ—Ä–≤–∏—Å–µ': {user_input}")

    if re.match(ORDER_REGEX, user_input):
        context.user_data['order_or_phone'] = user_input
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"–ì–æ—Ä–æ–¥: {city}\n"
            f"–£—Å–ª—É–≥–∞: {service}\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {user_input}\n"
            "–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!"
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ —Å —É—Å–ª—É–≥–æ–π: {service}, –≤–≤–µ–ª –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {user_input}")
        return ConversationHandler.END
    elif normalize_phone(user_input):
        phone = normalize_phone(user_input)
        context.user_data['order_or_phone'] = phone
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"–ì–æ—Ä–æ–¥: {city}\n"
            f"–£—Å–ª—É–≥–∞: {service}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"
            "–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ —Å —É—Å–ª—É–≥–æ–π: {service}, –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
        return ConversationHandler.END
    else:
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è '–ú–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–µ—Ä–≤–∏—Å–µ': {user_input}")
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX-XXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä, 253-59912) "
            "–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79999999999 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 79217578234)."
        )
        return DEVICE_IN_SERVICE


async def get_repair_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞"""
    repair_details = update.message.text
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤–≤–µ–ª –¥–µ—Ç–∞–ª–∏ —Ä–µ–º–æ–Ω—Ç–∞: {repair_details}")
    city = context.user_data['city']
    service = context.user_data['service']

    try:
        model, issue = [part.strip() for part in repair_details.split(',', 1)]
        context.user_data['model'] = model
        context.user_data['issue'] = issue
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) —É–∫–∞–∑–∞–ª –º–æ–¥–µ–ª—å: {model}, –ø—Ä–æ–±–ª–µ–º–∞: {issue}")
    except ValueError:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Ä–µ–º–æ–Ω—Ç–∞: {repair_details}")
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–±–ª–µ–º—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: iPhone 12 Pro Max, –±—ã—Å—Ç—Ä–æ —Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è"
        )
        
        return REPAIR_DETAILS

    await update.message.reply_text(
        "üî• –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –∞–∫—Ü–∏–∏ üëâ 5490 —Ä—É–±."
    )
    await update.message.reply_text(
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å –≤ –≥–æ—Ä–æ–¥–µ {city}üëá",
        reply_markup=SERVICE_CENTERS
    )
    return CHOOSE_SERVICE_CENTER


async def choose_service_center(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏—è"""
    service_center = update.message.text
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤—ã–±—Ä–∞–ª —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {service_center}")
    context.user_data['service_center'] = service_center

    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä–≤–∏—Å: {service_center}. –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å?",
        reply_markup=DATE_OPTIONS
    )
    return CHOOSE_DATE


async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è"""
    visit_date = update.message.text
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤—ã–±—Ä–∞–ª –¥–µ–Ω—å –ø–æ—Å–µ—â–µ–Ω–∏—è: {visit_date}")
    context.user_data['visit_date'] = visit_date

    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å: {visit_date}. –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–æ?",
        reply_markup=TIME_OPTIONS
    )
    return CHOOSE_TIME


async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    visit_time = update.message.text
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è: {visit_time}")
    context.user_data['visit_time'] = visit_time

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ (–º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã)."
    )
    return ENTER_NAME


async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    name = update.message.text
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤–≤–µ–ª –∏–º—è: {name}")

    if len(name) < 2 or not re.match(NAME_REGEX, name):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è: {name}")
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª–∏–Ω–æ–π –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–Ω–Ω–∞, –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤)."
        )
        return ENTER_NAME

    context.user_data['name'] = name
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79999999999 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º üëá",
        reply_markup=PHONE_KEYBOARD
    )
    return ENTER_PHONE


async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
    phone = None
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id

    if update.message.contact:
        phone_raw = update.message.contact.phone_number
        phone = normalize_phone(phone_raw)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º: {phone_raw}, –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {phone}")
        if not phone:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {phone_raw}")
            await update.message.reply_text(
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é "
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567, 8 (999) 123-45-67, 79991234567).",
                reply_markup=PHONE_KEYBOARD
            )
            return ENTER_PHONE
    elif update.message.text:
        phone_raw = update.message.text
        phone = normalize_phone(phone_raw)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤–≤–µ–ª –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é: {phone_raw}, –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {phone}")
        if not phone:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {phone_raw}")
            await update.message.reply_text(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ "
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567, 8 (999) 123-45-67, 79991234567).",
                reply_markup=PHONE_KEYBOARD
            )
            return ENTER_PHONE
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤–º–µ—Å—Ç–æ –Ω–æ–º–µ—Ä–∞")
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567, 8 (999) 123-45-67, 79991234567).",
            reply_markup=PHONE_KEYBOARD
        )
        return ENTER_PHONE

    city = context.user_data['city']
    service = context.user_data['service']
    model = context.user_data.get('model', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    issue = context.user_data.get('issue', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    service_center = context.user_data['service_center']
    visit_date = context.user_data['visit_date']
    visit_time = context.user_data['visit_time']
    name = context.user_data['name']

    context.user_data['phone'] = phone
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ —Å –¥–∞–Ω–Ω—ã–º–∏: {context.user_data}")

    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–£—Å–ª—É–≥–∞: {service}\n"
        f"–ú–æ–¥–µ–ª—å: {model}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {issue}\n"
        f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {service_center}\n"
        f"–î–µ–Ω—å –ø–æ—Å–µ—â–µ–Ω–∏—è: {visit_date}\n"
        f"–í—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è: {visit_time}\n"
        f"–ò–º—è: {name}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"
        "–°–ø–∞—Å–∏–±–æ! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    user_id = update.message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥")
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
    return ConversationHandler.END